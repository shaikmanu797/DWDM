require(caret)
require(e1071)
confusionMatrix(table(results))
churn_pred <- knn(train = churn.training, test = churn.test, cl = churn.trainLabels, k = 52)
results <- data.frame(churn_pred, churn.testLabels)
print(table(results))
require(caret)
require(e1071)
confusionMatrix(table(results))
k_value
k_value = sqrt(nrow(churn.training))
k_value = round(k_value, 0)
k_value
churn_pred <- knn(train = churn.training, test = churn.test, cl = churn.trainLabels, k = 52)
results <- data.frame(churn_pred, churn.testLabels)
table(results)
for(i in 50:55){
print(paste('For K=', i, ' , table is below'))
churn_pred <- knn(train = churn.training, test = churn.test, cl = churn.trainLabels, k = i)
results <- data.frame(churn_pred, churn.testLabels)
print(table(results))
}
churn_pred <- knn(train = churn.training, test = churn.test, cl = churn.trainLabels, k = 52)
results <- data.frame(churn_pred, churn.testLabels)
print(table(results))
churn_pred <- knn(train = churn.training, test = churn.test, cl = churn.trainLabels, k = 52)
results <- data.frame(churn_pred, churn.testLabels)
print(table(results))
churn_pred <- knn(train = churn.training, test = churn.test, cl = churn.trainLabels, k = 52)
churn_pred_final <- knn(train = churn.training, test = churn.test, cl = churn.trainLabels, k = 52)
results_final <- data.frame(churn_pred_final, churn.testLabels)
print(table(results_final))
require(caret)
require(e1071)
confusionMatrix(table(results_final))
confusionMatrix(table(results_final))
confusionMatrix(table(results_final))$accuracy
confusionMatrix(table(results_final))$overall
confusionMatrix(table(results_final))
names(churn)
churn2 = read.csv(file="churn.csv", header=T, sep=",", dec=".")
names(churn2)
churn2 = churn2[c(2, 9, 12, 18, 21)]
View(churn2)
churn2[1:4] <- sapply(churn2[1:4], function(x){
(x-min(x))/(max(x)-min(x))
})
head(churn2)
set.seed(1234)
ind = sample(2, nrow(churn2), replace=T, prob=c(.80, .20))
churn2.training <- churn2[ind == 1, 1:4]
churn2.test <- churn2[ind == 2, 1:4]
set.seed(1234)
ind = sample(2, nrow(churn2), replace=T, prob=c(.67, .33))
churn2.training <- churn2[ind == 1, 1:4]
churn2.test <- churn2[ind == 2, 1:4]
churn2 = read.csv(file="churn.csv", header=T, sep=",", dec=".")
churn2 = churn2[c(2, 9, 12, 18, 21)]
churn2[1:4] <- sapply(churn2[1:4], function(x){
(x-min(x))/(max(x)-min(x))
})
require(plyr)
churn2 = mutate(churn2, Churn. = churn2$Churn.)
head(churn2)
set.seed(1234)
ind = sample(2, nrow(churn2), replace=T, prob=c(.67, .33))
churn2.training <- churn2[ind == 1, ]
churn2.test <- churn2[ind == 2, ]
require(tree)
my.model <- tree(Churn. ~ ., data = churn2.training)
plot(my.model)
require(plyr)
churn2 = mutate(churn2, Churn. = churn2$Churn.)
head(churn2)
set.seed(1234)
ind = sample(2, nrow(churn2), replace=T, prob=c(.67, .33))
churn2.training <- churn2[ind == 1, 1:5]
churn2.test <- churn2[ind == 2, 1:5]
require(tree)
my.model <- tree(Churn. ~ ., data = churn2.training)
plot(my.model)
text(my.model, pretty=0)
churn2 = read.csv(file="churn.csv", header=T, sep=",", dec=".")
churn2 = churn2[c(2, 9, 12, 18, 21)]
churn2[1:4] <- sapply(churn2[1:4], function(x){
(x-min(x))/(max(x)-min(x))
})
require(plyr)
churn2 = mutate(churn2, Churn = churn2$Churn)
head(churn2)
set.seed(1234)
churn2 = read.csv(file="churn.csv", header=T, sep=",", dec=".")
churn2 = churn2[c(2, 9, 12, 18, 21)]
churn2[1:4] <- sapply(churn2[1:4], function(x){
(x-min(x))/(max(x)-min(x))
})
require(plyr)
churn2 = mutate(churn2, Churn = churn2$Churn)
head(churn2)
churn2 = read.csv(file="churn.csv", header=T, sep=",", dec=".")
churn2 = churn2[c(2, 9, 12, 18, 21)]
churn2[1:4] <- sapply(churn2[1:4], function(x){
(x-min(x))/(max(x)-min(x))
})
head(churn2)
rm(list(ls))
rm(list=ls())
churn2 = read.csv(file="churn.csv", header=T, sep=",", dec=".")
churn2 = churn2[c(2, 9, 12, 18, 21)]
churn2[1:4] <- sapply(churn2[1:4], function(x){
(x-min(x))/(max(x)-min(x))
})
head(churn2)
churn2 = read.csv(file="churn.csv", header=T, sep=",", dec=".")
churn2 = churn2[c(2, 9, 12, 18, 21)]
churn2[1:4] <- sapply(churn2[1:4], function(x){
require("class")
churn = read.csv(file="churn.csv", header=T, sep=",", dec=".")
churn <- churn[c(10, 13, 16, 19, 21)]
churn <- sapply(churn[1:4], function(x){
(x-min(x))/(max(x)-min(x))
})
;
require("class")
churn = read.csv(file="churn.csv", header=T, sep=",", dec=".")
churn <- churn[c(10, 13, 16, 19, 21)]
churn[1:4] <- sapply(churn[1:4], function(x){
(x-min(x))/(max(x)-min(x))
})
head(churn)
set.seed(1234)
ind = sample(2, nrow(churn), replace=T, prob=c(.80, .20))
churn.training <- churn[ind == 1, 1:4]
churn.test <- churn[ind == 2, 1:4]
churn.trainLabels <- churn[ind == 1, 5]
churn.testLabels <- churn[ind == 2, 5]
k_value = sqrt(nrow(churn.training))
k_value = round(k_value, 0)
k_value
churn_pred <- knn(train = churn.training, test = churn.test, cl = churn.trainLabels, k = 52)
results <- data.frame(churn_pred, churn.testLabels)
table(results)
for(i in 50:55){
print(paste('For K=', i, ' , table is below'))
churn_pred <- knn(train = churn.training, test = churn.test, cl = churn.trainLabels, k = i)
results <- data.frame(churn_pred, churn.testLabels)
print(table(results))
}
churn_pred_final <- knn(train = churn.training, test = churn.test, cl = churn.trainLabels, k = 52)
results_final <- data.frame(churn_pred_final, churn.testLabels)
print(table(results_final))
require(caret)
require(e1071)
confusionMatrix(table(results_final))
```
The accuracy of my knn model is 83.63% which says that the obtained predicted values for churn variable are 83.63% likely to be perfect prediction when the test variables(Day.Charge, Eve.Charge, Night.Charge, Intl.Charge) values are given.
confusionMatrix(table(results_final))
require("class")
churn = read.csv(file="churn.csv", header=T, sep=",", dec=".")
churn <- churn[c(10, 13, 16, 19, 21)]
churn[1:4] <- sapply(churn[1:4], function(x){
(x-min(x))/(max(x)-min(x))
})
head(churn)
set.seed(1234)
ind = sample(2, nrow(churn), replace=T, prob=c(.80, .20))
churn.training <- churn[ind == 1, 1:4]
churn.test <- churn[ind == 2, 1:4]
churn.trainLabels <- churn[ind == 1, 5]
churn.testLabels <- churn[ind == 2, 5]
k_value = sqrt(nrow(churn.training))
k_value = round(k_value, 0)
k_value
churn_pred <- knn(train = churn.training, test = churn.test, cl = churn.trainLabels, k = 52)
results <- data.frame(churn_pred, churn.testLabels)
table(results)
for(i in 50:55){
print(paste('For K=', i, ' , table is below'))
churn_pred <- knn(train = churn.training, test = churn.test, cl = churn.trainLabels, k = i)
results <- data.frame(churn_pred, churn.testLabels)
print(table(results))
}
churn_pred_final <- knn(train = churn.training, test = churn.test, cl = churn.trainLabels, k = 52)
results_final <- data.frame(churn_pred_final, churn.testLabels)
print(table(results_final))
for(i in 50:55){
print(paste('For K=', i, ' , table is below'))
churn_pred <- knn(train = churn.training, test = churn.test, cl = churn.trainLabels, k = i)
results <- data.frame(churn_pred, churn.testLabels)
print(table(results))
}
require("class")
churn = read.csv(file="churn.csv", header=T, sep=",", dec=".")
churn <- churn[c(10, 13, 16, 19, 21)]
churn[1:4] <- sapply(churn[1:4], function(x){
(x-min(x))/(max(x)-min(x))
})
head(churn)
set.seed(1234)
ind = sample(2, nrow(churn), replace=T, prob=c(.80, .20))
churn.training <- churn[ind == 1, 1:4]
churn.test <- churn[ind == 2, 1:4]
churn.trainLabels <- churn[ind == 1, 5]
churn.testLabels <- churn[ind == 2, 5]
k_value = sqrt(nrow(churn.training))
k_value = round(k_value, 0)
k_value
churn_pred <- knn(train = churn.training, test = churn.test, cl = churn.trainLabels, k = 52)
results <- data.frame(churn_pred, churn.testLabels)
table(results)
for(i in 50:55){
print(paste('For K=', i, ' , table is below'))
churn_pred <- knn(train = churn.training, test = churn.test, cl = churn.trainLabels, k = i)
results <- data.frame(churn_pred, churn.testLabels)
print(table(results))
}
churn_pred_final <- knn(train = churn.training, test = churn.test, cl = churn.trainLabels, k = 52)
results_final <- data.frame(churn_pred_final, churn.testLabels)
print(table(results_final))
require(caret)
require(e1071)
confusionMatrix(table(results_final))
churn2 = read.csv(file="churn.csv", header=T, sep=",", dec=".")
churn2 = churn2[c(2, 9, 12, 18, 21)]
n.churn2 <- data.frame(sapply(churn2[1:4], function(x){
(x-min(x))/(max(x)-min(x))
}))
require(plyr)
n.churn2 = mutate(n.churn2, Churn = churn2$Churn)
head(n.churn2)
set.seed(1234)
ind = sample(2, nrow(churn2), replace=T, prob=c(.67, .33))
churn2.training <- n.churn2[ind == 1, ]
churn2.test <- n.churn2[ind == 2, ]
require(tree)
my.model <- tree(Churn ~ ., data = churn2.training)
plot(my.model)
chrun2.training
View(churn2.training)
require(tree)
my.model <- tree(Churn ~ ., data = churn2.training)
plot(my.model)
text(my.model, pretty=0)
View(churn2.training)
summary(churn2.training)
n.churn2 = mutate(n.churn2, Churn = as.factor(churn2$Churn))
head(n.churn2)
set.seed(1234)
ind = sample(2, nrow(churn2), replace=T, prob=c(.67, .33))
churn2.training <- n.churn2[ind == 1, ]
churn2.test <- n.churn2[ind == 2, ]
require(tree)
my.model <- tree(Churn ~ ., data = churn2.training)
plot(my.model)
text(my.model, pretty=0)
names(churn2.training)
my.model <- tree(Churn ~ Account.Length + Day.Calls + Eve.Calls + Intl.Calls, data = churn2.training)
plot(my.model)
text(my.model, pretty=0)
churn2 = read.csv(file="churn.csv", header=T, sep=",", dec=".")
churn2 = churn2[c(2, 9, 12, 18, 21)]
n.churn2 <- data.frame(sapply(churn2[1:4], function(x){
(x-min(x))/(max(x)-min(x))
}))
require(plyr)
n.churn2 = mutate(n.churn2, Churn = churn2$Churn)
head(n.churn2)
set.seed(1234)
ind = sample(2, nrow(churn2), replace=T, prob=c(.80, .20))
churn2.training <- n.churn2[ind == 1, ]
churn2.test <- n.churn2[ind == 2, ]
require(tree)
my.model <- tree(Churn ~ Account.Length + Day.Calls + Eve.Calls + Intl.Calls, data = churn2.training)
plot(my.model)
text(my.model, pretty=0)
summary(churn2.training)
n.churn2 = mutate(n.churn2, Churn = as.factor(churn2$Churn))
head(n.churn2)
summary(churn2.training)
require(plyr)
n.churn2 = mutate(n.churn2, Churn = as.character(churn2$Churn))
head(n.churn2)
summary(churn2.training)
n.churn2 = mutate(n.churn2, Churn = as.factor(churn2$Churn))
head(n.churn2)
summary(churn2)
require(plyr)
n.churn2 = mutate(n.churn2, Churn = as.factor(churn2$Churn.))
head(n.churn2)
set.seed(1234)
ind = sample(2, nrow(churn2), replace=T, prob=c(.80, .20))
churn2.training <- n.churn2[ind == 1, ]
churn2.test <- n.churn2[ind == 2, ]
require(tree)
my.model <- tree(Churn ~ Account.Length + Day.Calls + Eve.Calls + Intl.Calls, data = churn2.training)
plot(my.model)
text(my.model, pretty=0)
summary(churn2)
summary(n.churn2)
n.churn2 = mutate(n.churn2, Churn = as.factor(churn2$Churn.))
head(n.churn2)
set.seed(1234)
ind = sample(2, nrow(churn2), replace=T, prob=c(.80, .20))
churn2.training <- n.churn2[ind == 1, ]
churn2.test <- n.churn2[ind == 2, ]
require(tree)
my.model <- tree(Churn ~ Account.Length + Day.Calls + Eve.Calls + Intl.Calls, data = churn2.training)
plot(my.model)
text(my.model, pretty=0)
churn2 = read.csv(file="churn.csv", header=T, sep=",", dec=".")
churn2 = churn2[c(2, 9, 12, 18, 21)]
n.churn2 <- data.frame(sapply(churn2[1:4], function(x){
(x-min(x))/(max(x)-min(x))
}))
n.churn2 = mutate(n.churn2, Churn = as.factor(churn2$Churn.))
require(plyr)
head(n.churn2)
set.seed(1234)
ind = sample(2, nrow(churn2), replace=T, prob=c(.80, .20))
summary(churn2)
summary(n.churn2)
churn2.training <- n.churn2[ind == 1, ]
churn2.test <- n.churn2[ind == 2, ]
summary(churn2.training)
my.model <- tree(Churn ~ ., data = churn2.training)
plot(my.model)
text(my.model, pretty=0)
my.model <- tree(churn2.training$Churn ~ ., data = churn2.training)
plot(my.model)
text(my.model, pretty=0)
churn2 = read.csv(file="churn.csv", header=T, sep=",", dec=".")
names(churn2)
churn2 = read.csv(file="churn.csv", header=T, sep=",", dec=".")
churn2 = churn2[c(9, 12, 15, 18, 21)]
n.churn2 <- data.frame(sapply(churn2[1:4], function(x){
(x-min(x))/(max(x)-min(x))
}))
require(plyr)
n.churn2 = mutate(n.churn2, Churn = as.factor(churn2$Churn.))
head(n.churn2)
set.seed(1234)
ind = sample(2, nrow(churn2), replace=T, prob=c(.80, .20))
churn2.training <- n.churn2[ind == 1, ]
churn2.test <- n.churn2[ind == 2, ]
require(tree)
my.model <- tree(churn2.training$Churn ~ ., data = churn2.training)
plot(my.model)
text(my.model, pretty=0)
my.model
churn2 = read.csv(file="churn.csv", header=T, sep=",", dec=".")
churn2 = churn2[c(9, 12, 15, 18, 21)]
n.churn2 <- data.frame(sapply(churn2[1:4], function(x){
(x-min(x))/(max(x)-min(x))
}))
require(plyr)
n.churn2 = mutate(n.churn2, Churn = as.factor(churn2$Churn.))
head(n.churn2)
set.seed(1234)
ind = sample(2, nrow(churn2), replace=T, prob=c(.67, .33))
churn2.training <- n.churn2[ind == 1, ]
churn2.test <- n.churn2[ind == 2, ]
require(tree)
my.model <- tree(churn2.training$Churn ~ ., data = churn2.training)
plot(my.model)
text(my.model, pretty=0)
require(plyr)
n.churn2 = mutate(n.churn2, Churn. = as.factor(churn2$Churn.))
head(n.churn2)
rm(n.churn2)
require(plyr)
n.churn2 = mutate(n.churn2, Churn. = as.factor(churn2$Churn.))
head(n.churn2)
churn2 = read.csv(file="churn.csv", header=T, sep=",", dec=".")
churn2 = churn2[c(9, 12, 15, 18, 21)]
n.churn2 <- data.frame(sapply(churn2[1:4], function(x){
(x-min(x))/(max(x)-min(x))
}))
require(plyr)
n.churn2 = mutate(n.churn2, Churn. = as.factor(churn2$Churn.))
set.seed(1234)
head(n.churn2)
ind = sample(2, nrow(churn2), replace=T, prob=c(.67, .33))
churn2.training <- n.churn2[ind == 1, ]
churn2.test <- n.churn2[ind == 2, ]
require(tree)
my.model <- tree(Churn ~ ., data = churn2.training)
plot(my.model)
require(tree)
my.model <- tree(Churn. ~ ., data = churn2.training)
plot(my.model)
text(my.model, pretty=0)
my.model
(my.model)
my.model <- tree(Churn. ~ ., data = churn2.training)
my.model
plot(my.model)
text(my.model, pretty=0)
summary(churn2)
View(churn2)
churn2 = read.csv(file="churn.csv", header=T, sep=",", dec=".")
churn2 = churn2[c(9, 12, 15, 18, 21)]
n.churn2 <- data.frame(sapply(churn2[1:4], function(x){
(x-min(x))/(max(x)-min(x))
}))
require(plyr)
n.churn2 = mutate(n.churn2, Churn. = as.factor(churn2$Churn.))
head(n.churn2)
set.seed(1234)
ind = sample(2, nrow(churn2), replace=T, prob=c(.67, .33))
churn2.training <- n.churn2[ind == 1, ]
churn2.test <- n.churn2[ind == 2, ]
require(tree)
my.model <- tree(Churn. ~ ., data = churn2.training)
my.model
plot(my.model)
text(my.model, pretty=0)
churn2 = read.csv(file="churn.csv", header=T, sep=",", dec=".")
churn2 = churn2[c(9, 12, 15, 18, 21)]
n.churn2 <- data.frame(sapply(churn2[1:4], function(x){
churn2 = read.csv(file="churn.csv", header=T, sep=",", dec=".")
churn2 = read.csv(file="churn.csv", header=T, sep=",", dec=".")
View(churn2)
churn2 = read.csv(file="churn.csv", header=T, sep=",", dec=".")
View(churn2)
names(churn2)
churn2 = churn2[c(9, 12, 15, 19, 21)]
n.churn2 <- data.frame(sapply(churn2[1:4], function(x){
(x-min(x))/(max(x)-min(x))
}))
require(plyr)
n.churn2 = mutate(n.churn2, Churn. = as.factor(churn2$Churn.))
head(n.churn2)
set.seed(1234)
ind = sample(2, nrow(churn2), replace=T, prob=c(.67, .33))
churn2.training <- n.churn2[ind == 1, ]
churn2.test <- n.churn2[ind == 2, ]
require(tree)
my.model <- tree(Churn. ~ ., data = churn2.training)
my.model
plot(my.model)
text(my.model, pretty=0)
churn2 = read.csv(file="churn.csv", header=T, sep=",", dec=".")
names(churn2)
churn2 = churn2[c(9, 10, 13, 11, 21)]
n.churn2 <- data.frame(sapply(churn2[1:4], function(x){
(x-min(x))/(max(x)-min(x))
}))
require(plyr)
n.churn2 = mutate(n.churn2, Churn. = as.factor(churn2$Churn.))
head(n.churn2)
set.seed(1234)
ind = sample(2, nrow(churn2), replace=T, prob=c(.67, .33))
churn2.training <- n.churn2[ind == 1, ]
churn2.test <- n.churn2[ind == 2, ]
require(tree)
my.model <- tree(Churn. ~ ., data = churn2.training)
my.model
plot(my.model)
text(my.model, pretty=0)
my.prediction = predict(my.model, churn2.test, type="class")
table(my.prediction, churn2.test$Churn.)
require(e1071)
confusionMatrix(table(my.prediction, churn2.test$Churn.))
require(caret)
require(e1071)
confusionMatrix(table(my.prediction, churn2.test$Churn.))
table(my.prediction, churn2.test$Churn.)
confusionMatrix(table(my.prediction, churn2.test$Churn.))
cv_tree = cv.tree(my.model, FUN = prune.misclass)
names(cv_tree)
plot(cv_tree$size, cv_tree$dev, type="b")
pruned.model = prune.misclass(my.model, best = 3)
plot(pruned.model)
text(pruned.model, pretty = 0)
pruned.prediction = predict(pruned.model, churn2.test, type="class")
confusionMatrix(table(pruned.prediction, churn2.test$Churn.))
pruned.model = prune.misclass(my.model, best = 6)
plot(pruned.model)
text(pruned.model, pretty = 0)
pruned.prediction = predict(pruned.model, churn2.test, type="class")
confusionMatrix(table(pruned.prediction, churn2.test$Churn.))
pruned.model = prune.misclass(my.model, best = 3)
churn2 = read.csv(file="churn.csv", header=T, sep=",", dec=".")
churn2 = churn2[c(9, 10, 13, 11, 21)]
n.churn2 <- data.frame(sapply(churn2[1:4], function(x){
(x-min(x))/(max(x)-min(x))
}))
require(plyr)
n.churn2 = mutate(n.churn2, Churn. = as.factor(churn2$Churn.))
head(n.churn2)
set.seed(1234)
ind = sample(2, nrow(churn2), replace=T, prob=c(.67, .33))
churn2.training <- n.churn2[ind == 1, ]
churn2.test <- n.churn2[ind == 2, ]
require(tree)
my.model <- tree(Churn. ~ ., data = churn2.training)
my.model
plot(my.model)
text(my.model, pretty=0)
my.prediction = predict(my.model, churn2.test, type="class")
table(my.prediction, churn2.test$Churn.)
require(caret)
require(e1071)
confusionMatrix(table(my.prediction, churn2.test$Churn.))
cv_tree = cv.tree(my.model, FUN = prune.misclass)
names(cv_tree)
plot(cv_tree$size, cv_tree$dev, type="b")
pruned.model = prune.misclass(my.model, best = 3)
plot(pruned.model)
text(pruned.model, pretty = 0)
pruned.prediction = predict(pruned.model, churn2.test, type="class")
confusionMatrix(table(pruned.prediction, churn2.test$Churn.))
